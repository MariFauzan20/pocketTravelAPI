{
	"info": {
		"_postman_id": "88d1423d-4750-44de-8964-dcd6a8ed1f1c",
		"name": "diary",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseJson = pm.response.json();",
							"    pm.collectionVariables.set(\"_id\", responseJson.data[0]._id);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    // var jsonData = pm.response.json();",
							"    // pm.expect(jsonData.value).to.eql(100);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{uri}}/public",
					"host": [
						"{{uri}}"
					],
					"path": [
						"public"
					]
				}
			},
			"response": []
		},
		{
			"name": "register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include('{\"isSuccess\":true,\"message\":\"User berhasil dibuat\"}');",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isSuccess).to.eql(true);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body('{\"isSuccess\":true,\"message\":\"User berhasil dibuat\"}');",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Created\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"test\",\n    \"email\":\"test@mail.com\",\n    \"password\":\"secret\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{uri}}/register",
					"host": [
						"{{uri}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseJson = pm.response.json();",
							"    pm.collectionVariables.set(\"user_id\", responseJson.user_id);",
							"    pm.collectionVariables.set(\"token\", responseJson.token);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(true);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isSuccess).to.eql(true);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    // pm.response.to.have.body(\"response_body_string\");",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@mail.com\",\n    \"password\":\"secret\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{uri}}/login",
					"host": [
						"{{uri}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    // var jsonData = pm.response.json();",
							"    // pm.expect(jsonData.value).to.eql(100);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body('[]');",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Created\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"country\": \"EU\",\n    \"location\": \"Bruxelles\",\n    \"image\": [\"https://eu4.paradoxwikis.com/images/a/ad/Bosnia.png\", \"https://eu4.paradoxwikis.com/images/6/6a/Hungary.png\", \"https://eu4.paradoxwikis.com/images/e/e1/Venice.png\"],\n    \"caption\": \"yes\",\n    \"isPublic\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{uri}}/diary",
					"host": [
						"{{uri}}"
					],
					"path": [
						"diary"
					]
				}
			},
			"response": []
		},
		{
			"name": "check-store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseJson = pm.response.json();",
							"    pm.collectionVariables.set(\"_id\", responseJson.data[0]._id);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data[0].location).to.eql('Bruxelles');",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{uri}}/diary",
					"host": [
						"{{uri}}"
					],
					"path": [
						"diary"
					]
				}
			},
			"response": []
		},
		{
			"name": "index",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseJson = pm.response.json();",
							"    pm.collectionVariables.set(\"_id\", responseJson.data[0]._id);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    // var jsonData = pm.response.json();",
							"    // pm.expect(jsonData.value).to.eql(100);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{uri}}/diary",
					"host": [
						"{{uri}}"
					],
					"path": [
						"diary"
					]
				}
			},
			"response": []
		},
		{
			"name": "show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    // var jsonData = pm.response.json();",
							"    // pm.expect(jsonData.value).to.eql(100);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{uri}}/diary/{{_id}}",
					"host": [
						"{{uri}}"
					],
					"path": [
						"diary",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    // var jsonData = pm.response.json();",
							"    // pm.expect(jsonData.value).to.eql(100);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body('');",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    // pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"No Content\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"country\": \"EU\",\n    \"location\": \"Sudetenland\",\n    \"image\": [\"https://eu4.paradoxwikis.com/images/a/ad/Bosnia.png\", \"https://eu4.paradoxwikis.com/images/6/6a/Hungary.png\", \"https://eu4.paradoxwikis.com/images/e/e1/Venice.png\"],\n    \"caption\": \"yes\",\n    \"isPublic\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{uri}}/diary/{{_id}}",
					"host": [
						"{{uri}}"
					],
					"path": [
						"diary",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "check-update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.location).to.eql('Sudetenland');",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{uri}}/diary/{{_id}}",
					"host": [
						"{{uri}}"
					],
					"path": [
						"diary",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "destroy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include([]);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    // var jsonData = pm.response.json();",
							"    // pm.expect(jsonData.value).to.eql(100);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body('');",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    // pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"No Content\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{uri}}/diary/{{_id}}",
					"host": [
						"{{uri}}"
					],
					"path": [
						"diary",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Token berhasil dihapus\");",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isSuccess).to.eql(true);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body('{\"isSuccess\":true,\"message\":\"Token berhasil dihapus\"}');",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{uri}}/logout",
					"host": [
						"{{uri}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "_id",
			"value": ""
		},
		{
			"key": "uri",
			"value": "https://pockettravel-api.herokuapp.com/api"
		}
	]
}